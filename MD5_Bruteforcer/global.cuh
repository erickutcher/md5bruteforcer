/*
	MD5 Bruteforcer is a CUDA based MD5 brute force program.
	Copyright (C) 2016-2017 Eric Kutcher

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef _GLOBAL_CUH
#define _GLOBAL_CUH

#include "md5.cuh"

#include "HB1.cuh"
#include "HB2.cuh"
#include "HB3.cuh"
#include "HB4.cuh"
#include "HB5.cuh"
#include "HB6.cuh"

#include "HB1N.cuh"
#include "HB2N.cuh"
#include "HB3N.cuh"
#include "HB4N.cuh"
#include "HB5N.cuh"
#include "HB6N.cuh"

__global__
void GenerateInputChunk( unsigned long max_int_length, unsigned long byte_length )
{
	register unsigned char a, i;

	register unsigned int offset = ( ( blockIdx.y * gridDim.x + blockIdx.x ) * blockDim.x ) + threadIdx.x;
	register unsigned char *input = ( unsigned char * )( gd_input_chunk + ( offset * max_int_length ) );

	for ( i = 1; i < byte_length; ++i )
	{
		++input;

		a = offset % gd_character_set_size;
		offset /= gd_character_set_size;

		*input = gd_character_set[ a ];
	}

	// Set the padding byte.
	if ( byte_length % 4 )
	{
		*++input = 0x80;
	}
}

__global__
void PreReverseHashInputLength06()
{
	unsigned int *itr_input = gd_reversed_hash_values + ( ( blockIdx.x * blockDim.x + threadIdx.x ) << 2 );	// Shift by 2 to multiply by 4.

	register unsigned int in01 = 0x00800000 | gd_character_set[ blockIdx.x ] << 8 | gd_character_set[ threadIdx.x ];

	register unsigned int tra = gd_hash_value[ 0 ];
	register unsigned int trb = gd_hash_value[ 1 ];
	register unsigned int trc = gd_hash_value[ 2 ];
	register unsigned int trd = gd_hash_value[ 3 ];

	// Round 4 reversal
	RII0( trb, trc, trd, tra,       S44, 0xeb86d391 );	// 64
	RII0( trc, trd, tra, trb,       S43, 0x2ad7d2bb );	// 63
	RII0( trd, tra, trb, trc,       S42, 0xbd3af235 );	// 62
	RII0( tra, trb, trc, trd,       S41, 0xf7537e82 );	// 61
	RII0( trb, trc, trd, tra,       S44, 0x4e0811a1 );	// 60
	RII0( trc, trd, tra, trb,       S43, 0xa3014314 );	// 59
	RII0( trd, tra, trb, trc,       S42, 0xfe2ce6e0 );	// 58
	RII0( tra, trb, trc, trd,       S41, 0x6fa87e4f );	// 57
	RII ( trb, trc, trd, tra, in01, S44, 0x85845dd1 );	// 56
	RII0( trc, trd, tra, trb,       S43, 0xffeff47d );	// 55
	RII0( trd, tra, trb, trc,       S42, 0x8f0ccc92 );	// 54
	RII0( tra, trb, trc, trd,       S41, 0x655b59c3 );	// 53
	RII0( trb, trc, trd, tra,       S44, 0xfc93a039 );	// 53
	RII0( trc, trd, tra, trb,       S43, 0xab9423d7 );	// 51 (ac = 0xab9423a7 + 0x30)
	RII0( trd, tra, trb, trc,       S42, 0x432aff97 );	// 50
	RII0( tra, trb, trc, trd,       S41, 0xf4292244 );	// 49

	// Round 3 reversal
	RHH0( trb, trc, trd, tra,       S34, 0xc4ac5665 );	// 48

	itr_input[ 0 ] = tra;
	itr_input[ 1 ] = trb;
	itr_input[ 2 ] = trc;
	itr_input[ 3 ] = trd;
}

const unsigned long function_count = 55 * 12;

void ( *hash_function[ function_count ] )() = {
	 &HL01B01, &HL02B01, &HL03B01, &HL04B01, &HL05B01,
	 &RHL06B01, &HL07B01, &HL08B01, &HL09B01, &HL10B01,
	 &HL11B01, &HL12B01, &HL13B01, &HL14B01, &HL15B01,
	 &HL16B01, &HL17B01, &HL18B01, &HL19B01, &HL20B01,
	 &HL21B01, &HL22B01, &HL23B01, &HL24B01, &HL25B01,
	 &HL26B01, &HL27B01, &HL28B01, &HL29B01, &HL30B01,
	 &HL31B01, &HL32B01, &HL33B01, &HL34B01, &HL35B01,
	 &HL36B01, &HL37B01, &HL38B01, &HL39B01, &HL40B01,
	 &HL41B01, &HL42B01, &HL43B01, &HL44B01, &HL45B01,
	 &HL46B01, &HL47B01, &HL48B01, &HL49B01, &HL50B01,
	 &HL51B01, &HL52B01, &HL53B01, &HL54B01, &HL55B01,

	 &HL01B02, &HL02B02, &HL03B02, &HL04B02, &HL05B02,
	 &HL06B02, &HL07B02, &HL08B02, &HL09B02, &HL10B02,
	 &HL11B02, &HL12B02, &HL13B02, &HL14B02, &HL15B02,
	 &HL16B02, &HL17B02, &HL18B02, &HL19B02, &HL20B02,
	 &HL21B02, &HL22B02, &HL23B02, &HL24B02, &HL25B02,
	 &HL26B02, &HL27B02, &HL28B02, &HL29B02, &HL30B02,
	 &HL31B02, &HL32B02, &HL33B02, &HL34B02, &HL35B02,
	 &HL36B02, &HL37B02, &HL38B02, &HL39B02, &HL40B02,
	 &HL41B02, &HL42B02, &HL43B02, &HL44B02, &HL45B02,
	 &HL46B02, &HL47B02, &HL48B02, &HL49B02, &HL50B02,
	 &HL51B02, &HL52B02, &HL53B02, &HL54B02, &HL55B02,

	 &HL01B03, &HL02B03, &HL03B03, &HL04B03, &HL05B03,
	 &HL06B03, &HL07B03, &HL08B03, &HL09B03, &HL10B03,
	 &HL11B03, &HL12B03, &HL13B03, &HL14B03, &HL15B03,
	 &HL16B03, &HL17B03, &HL18B03, &HL19B03, &HL20B03,
	 &HL21B03, &HL22B03, &HL23B03, &HL24B03, &HL25B03,
	 &HL26B03, &HL27B03, &HL28B03, &HL29B03, &HL30B03,
	 &HL31B03, &HL32B03, &HL33B03, &HL34B03, &HL35B03,
	 &HL36B03, &HL37B03, &HL38B03, &HL39B03, &HL40B03,
	 &HL41B03, &HL42B03, &HL43B03, &HL44B03, &HL45B03,
	 &HL46B03, &HL47B03, &HL48B03, &HL49B03, &HL50B03,
	 &HL51B03, &HL52B03, &HL53B03, &HL54B03, &HL55B03,

	 &HL01B04, &HL02B04, &HL03B04, &HL04B04, &HL05B04,
	 &HL06B04, &HL07B04, &HL08B04, &HL09B04, &HL10B04,
	 &HL11B04, &HL12B04, &HL13B04, &HL14B04, &HL15B04,
	 &HL16B04, &HL17B04, &HL18B04, &HL19B04, &HL20B04,
	 &HL21B04, &HL22B04, &HL23B04, &HL24B04, &HL25B04,
	 &HL26B04, &HL27B04, &HL28B04, &HL29B04, &HL30B04,
	 &HL31B04, &HL32B04, &HL33B04, &HL34B04, &HL35B04,
	 &HL36B04, &HL37B04, &HL38B04, &HL39B04, &HL40B04,
	 &HL41B04, &HL42B04, &HL43B04, &HL44B04, &HL45B04,
	 &HL46B04, &HL47B04, &HL48B04, &HL49B04, &HL50B04,
	 &HL51B04, &HL52B04, &HL53B04, &HL54B04, &HL55B04,

	 &HL01B05, &HL02B05, &HL03B05, &HL04B05, &HL05B05,
	 &HL06B05, &HL07B05, &HL08B05, &HL09B05, &HL10B05,
	 &HL11B05, &HL12B05, &HL13B05, &HL14B05, &HL15B05,
	 &HL16B05, &HL17B05, &HL18B05, &HL19B05, &HL20B05,
	 &HL21B05, &HL22B05, &HL23B05, &HL24B05, &HL25B05,
	 &HL26B05, &HL27B05, &HL28B05, &HL29B05, &HL30B05,
	 &HL31B05, &HL32B05, &HL33B05, &HL34B05, &HL35B05,
	 &HL36B05, &HL37B05, &HL38B05, &HL39B05, &HL40B05,
	 &HL41B05, &HL42B05, &HL43B05, &HL44B05, &HL45B05,
	 &HL46B05, &HL47B05, &HL48B05, &HL49B05, &HL50B05,
	 &HL51B05, &HL52B05, &HL53B05, &HL54B05, &HL55B05,

	 &HL01B06, &HL02B06, &HL03B06, &HL04B06, &HL05B06,
	 &HL06B06, &HL07B06, &HL08B06, &HL09B06, &HL10B06,
	 &HL11B06, &HL12B06, &HL13B06, &HL14B06, &HL15B06,
	 &HL16B06, &HL17B06, &HL18B06, &HL19B06, &HL20B06,
	 &HL21B06, &HL22B06, &HL23B06, &HL24B06, &HL25B06,
	 &HL26B06, &HL27B06, &HL28B06, &HL29B06, &HL30B06,
	 &HL31B06, &HL32B06, &HL33B06, &HL34B06, &HL35B06,
	 &HL36B06, &HL37B06, &HL38B06, &HL39B06, &HL40B06,
	 &HL41B06, &HL42B06, &HL43B06, &HL44B06, &HL45B06,
	 &HL46B06, &HL47B06, &HL48B06, &HL49B06, &HL50B06,
	 &HL51B06, &HL52B06, &HL53B06, &HL54B06, &HL55B06,

	 &HL01B01N, &HL02B01N, &HL03B01N, &HL04B01N, &HL05B01N,
	 &RHL06B01N, &HL07B01N, &HL08B01N, &HL09B01N, &HL10B01N,
	 &HL11B01N, &HL12B01N, &HL13B01N, &HL14B01N, &HL15B01N,
	 &HL16B01N, &HL17B01N, &HL18B01N, &HL19B01N, &HL20B01N,
	 &HL21B01N, &HL22B01N, &HL23B01N, &HL24B01N, &HL25B01N,
	 &HL26B01N, &HL27B01N, &HL28B01N, &HL29B01N, &HL30B01N,
	 &HL31B01N, &HL32B01N, &HL33B01N, &HL34B01N, &HL35B01N,
	 &HL36B01N, &HL37B01N, &HL38B01N, &HL39B01N, &HL40B01N,
	 &HL41B01N, &HL42B01N, &HL43B01N, &HL44B01N, &HL45B01N,
	 &HL46B01N, &HL47B01N, &HL48B01N, &HL49B01N, &HL50B01N,
	 &HL51B01N, &HL52B01N, &HL53B01N, &HL54B01N, &HL55B01N,

	 &HL01B02N, &HL02B02N, &HL03B02N, &HL04B02N, &HL05B02N,
	 &HL06B02N, &HL07B02N, &HL08B02N, &HL09B02N, &HL10B02N,
	 &HL11B02N, &HL12B02N, &HL13B02N, &HL14B02N, &HL15B02N,
	 &HL16B02N, &HL17B02N, &HL18B02N, &HL19B02N, &HL20B02N,
	 &HL21B02N, &HL22B02N, &HL23B02N, &HL24B02N, &HL25B02N,
	 &HL26B02N, &HL27B02N, &HL28B02N, &HL29B02N, &HL30B02N,
	 &HL31B02N, &HL32B02N, &HL33B02N, &HL34B02N, &HL35B02N,
	 &HL36B02N, &HL37B02N, &HL38B02N, &HL39B02N, &HL40B02N,
	 &HL41B02N, &HL42B02N, &HL43B02N, &HL44B02N, &HL45B02N,
	 &HL46B02N, &HL47B02N, &HL48B02N, &HL49B02N, &HL50B02N,
	 &HL51B02N, &HL52B02N, &HL53B02N, &HL54B02N, &HL55B02N,

	 &HL01B03N, &HL02B03N, &HL03B03N, &HL04B03N, &HL05B03N,
	 &HL06B03N, &HL07B03N, &HL08B03N, &HL09B03N, &HL10B03N,
	 &HL11B03N, &HL12B03N, &HL13B03N, &HL14B03N, &HL15B03N,
	 &HL16B03N, &HL17B03N, &HL18B03N, &HL19B03N, &HL20B03N,
	 &HL21B03N, &HL22B03N, &HL23B03N, &HL24B03N, &HL25B03N,
	 &HL26B03N, &HL27B03N, &HL28B03N, &HL29B03N, &HL30B03N,
	 &HL31B03N, &HL32B03N, &HL33B03N, &HL34B03N, &HL35B03N,
	 &HL36B03N, &HL37B03N, &HL38B03N, &HL39B03N, &HL40B03N,
	 &HL41B03N, &HL42B03N, &HL43B03N, &HL44B03N, &HL45B03N,
	 &HL46B03N, &HL47B03N, &HL48B03N, &HL49B03N, &HL50B03N,
	 &HL51B03N, &HL52B03N, &HL53B03N, &HL54B03N, &HL55B03N,

	 &HL01B04N, &HL02B04N, &HL03B04N, &HL04B04N, &HL05B04N,
	 &HL06B04N, &HL07B04N, &HL08B04N, &HL09B04N, &HL10B04N,
	 &HL11B04N, &HL12B04N, &HL13B04N, &HL14B04N, &HL15B04N,
	 &HL16B04N, &HL17B04N, &HL18B04N, &HL19B04N, &HL20B04N,
	 &HL21B04N, &HL22B04N, &HL23B04N, &HL24B04N, &HL25B04N,
	 &HL26B04N, &HL27B04N, &HL28B04N, &HL29B04N, &HL30B04N,
	 &HL31B04N, &HL32B04N, &HL33B04N, &HL34B04N, &HL35B04N,
	 &HL36B04N, &HL37B04N, &HL38B04N, &HL39B04N, &HL40B04N,
	 &HL41B04N, &HL42B04N, &HL43B04N, &HL44B04N, &HL45B04N,
	 &HL46B04N, &HL47B04N, &HL48B04N, &HL49B04N, &HL50B04N,
	 &HL51B04N, &HL52B04N, &HL53B04N, &HL54B04N, &HL55B04N,

	 &HL01B05N, &HL02B05N, &HL03B05N, &HL04B05N, &HL05B05N,
	 &HL06B05N, &HL07B05N, &HL08B05N, &HL09B05N, &HL10B05N,
	 &HL11B05N, &HL12B05N, &HL13B05N, &HL14B05N, &HL15B05N,
	 &HL16B05N, &HL17B05N, &HL18B05N, &HL19B05N, &HL20B05N,
	 &HL21B05N, &HL22B05N, &HL23B05N, &HL24B05N, &HL25B05N,
	 &HL26B05N, &HL27B05N, &HL28B05N, &HL29B05N, &HL30B05N,
	 &HL31B05N, &HL32B05N, &HL33B05N, &HL34B05N, &HL35B05N,
	 &HL36B05N, &HL37B05N, &HL38B05N, &HL39B05N, &HL40B05N,
	 &HL41B05N, &HL42B05N, &HL43B05N, &HL44B05N, &HL45B05N,
	 &HL46B05N, &HL47B05N, &HL48B05N, &HL49B05N, &HL50B05N,
	 &HL51B05N, &HL52B05N, &HL53B05N, &HL54B05N, &HL55B05N,

	 &HL01B06N, &HL02B06N, &HL03B06N, &HL04B06N, &HL05B06N,
	 &HL06B06N, &HL07B06N, &HL08B06N, &HL09B06N, &HL10B06N,
	 &HL11B06N, &HL12B06N, &HL13B06N, &HL14B06N, &HL15B06N,
	 &HL16B06N, &HL17B06N, &HL18B06N, &HL19B06N, &HL20B06N,
	 &HL21B06N, &HL22B06N, &HL23B06N, &HL24B06N, &HL25B06N,
	 &HL26B06N, &HL27B06N, &HL28B06N, &HL29B06N, &HL30B06N,
	 &HL31B06N, &HL32B06N, &HL33B06N, &HL34B06N, &HL35B06N,
	 &HL36B06N, &HL37B06N, &HL38B06N, &HL39B06N, &HL40B06N,
	 &HL41B06N, &HL42B06N, &HL43B06N, &HL44B06N, &HL45B06N,
	 &HL46B06N, &HL47B06N, &HL48B06N, &HL49B06N, &HL50B06N,
	 &HL51B06N, &HL52B06N, &HL53B06N, &HL54B06N, &HL55B06N
};

#endif
